// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: MumbleUDP.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021, 8981
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace MumbleUDPProto {

  /// <summary>Holder for reflection information generated from MumbleUDP.proto</summary>
  public static partial class MumbleUDPReflection {

    #region Descriptor
    /// <summary>File descriptor for MumbleUDP.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static MumbleUDPReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg9NdW1ibGVVRFAucHJvdG8SDk11bWJsZVVEUFByb3RvIsIBCgVBdWRpbxIQ",
            "CgZ0YXJnZXQYASABKA1IABIRCgdjb250ZXh0GAIgASgNSAASFgoOc2VuZGVy",
            "X3Nlc3Npb24YAyABKA0SFAoMZnJhbWVfbnVtYmVyGAQgASgEEhEKCW9wdXNf",
            "ZGF0YRgFIAEoDBIXCg9wb3NpdGlvbmFsX2RhdGEYBiADKAISGQoRdm9sdW1l",
            "X2FkanVzdG1lbnQYByABKAISFQoNaXNfdGVybWluYXRvchgQIAEoCEIICgZI",
            "ZWFkZXIipgEKBFBpbmcSEQoJdGltZXN0YW1wGAEgASgEEiQKHHJlcXVlc3Rf",
            "ZXh0ZW5kZWRfaW5mb3JtYXRpb24YAiABKAgSGQoRc2VydmVyX3ZlcnNpb25f",
            "djIYAyABKAQSEgoKdXNlcl9jb3VudBgEIAEoDRIWCg5tYXhfdXNlcl9jb3Vu",
            "dBgFIAEoDRIeChZtYXhfYmFuZHdpZHRoX3Blcl91c2VyGAYgASgNQgJIAWIG",
            "cHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::MumbleUDPProto.Audio), global::MumbleUDPProto.Audio.Parser, new[]{ "Target", "Context", "SenderSession", "FrameNumber", "OpusData", "PositionalData", "VolumeAdjustment", "IsTerminator" }, new[]{ "Header" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::MumbleUDPProto.Ping), global::MumbleUDPProto.Ping.Parser, new[]{ "Timestamp", "RequestExtendedInformation", "ServerVersionV2", "UserCount", "MaxUserCount", "MaxBandwidthPerUser" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class Audio : pb::IMessage<Audio>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Audio> _parser = new pb::MessageParser<Audio>(() => new Audio());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<Audio> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::MumbleUDPProto.MumbleUDPReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Audio() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Audio(Audio other) : this() {
      senderSession_ = other.senderSession_;
      frameNumber_ = other.frameNumber_;
      opusData_ = other.opusData_;
      positionalData_ = other.positionalData_.Clone();
      volumeAdjustment_ = other.volumeAdjustment_;
      isTerminator_ = other.isTerminator_;
      switch (other.HeaderCase) {
        case HeaderOneofCase.Target:
          Target = other.Target;
          break;
        case HeaderOneofCase.Context:
          Context = other.Context;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Audio Clone() {
      return new Audio(this);
    }

    /// <summary>Field number for the "target" field.</summary>
    public const int TargetFieldNumber = 1;
    /// <summary>
    /// When this audio is sent by the client to the server, this is set to the target of the audio data. This target
    /// is a number in the range [0, 2^{32} - 1], where 0 means "normal talking", 2^{5} - 1 means "server loopback"
    /// and all other targets are understood as shout/whisper targets that have previously been registered via a
    /// VoiceTarget message (via TCP).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint Target {
      get { return HasTarget ? (uint) header_ : 0; }
      set {
        header_ = value;
        headerCase_ = HeaderOneofCase.Target;
      }
    }
    /// <summary>Gets whether the "target" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasTarget {
      get { return headerCase_ == HeaderOneofCase.Target; }
    }
    /// <summary> Clears the value of the oneof if it's currently set to "target" </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearTarget() {
      if (HasTarget) {
        ClearHeader();
      }
    }

    /// <summary>Field number for the "context" field.</summary>
    public const int ContextFieldNumber = 2;
    /// <summary>
    /// When this audio is sent by the server to the client, this indicates the context in which the audio has been sent.
    /// 0: Normal speech
    /// 1: Shout to channel
    /// 2: Whisper to user
    /// 3: Received via channel listener
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint Context {
      get { return HasContext ? (uint) header_ : 0; }
      set {
        header_ = value;
        headerCase_ = HeaderOneofCase.Context;
      }
    }
    /// <summary>Gets whether the "context" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasContext {
      get { return headerCase_ == HeaderOneofCase.Context; }
    }
    /// <summary> Clears the value of the oneof if it's currently set to "context" </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearContext() {
      if (HasContext) {
        ClearHeader();
      }
    }

    /// <summary>Field number for the "sender_session" field.</summary>
    public const int SenderSessionFieldNumber = 3;
    private uint senderSession_;
    /// <summary>
    /// The session of the client (sender) this audio was originally sent from. This field is not required when sending
    /// audio to the server, but will always be set when receiving audio from the server.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint SenderSession {
      get { return senderSession_; }
      set {
        senderSession_ = value;
      }
    }

    /// <summary>Field number for the "frame_number" field.</summary>
    public const int FrameNumberFieldNumber = 4;
    private ulong frameNumber_;
    /// <summary>
    /// The number of the first contained audio frame (indicating the position of that frame in the overall audio stream)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ulong FrameNumber {
      get { return frameNumber_; }
      set {
        frameNumber_ = value;
      }
    }

    /// <summary>Field number for the "opus_data" field.</summary>
    public const int OpusDataFieldNumber = 5;
    private pb::ByteString opusData_ = pb::ByteString.Empty;
    /// <summary>
    /// The actual voice data payload in the Opus format.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pb::ByteString OpusData {
      get { return opusData_; }
      set {
        opusData_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "positional_data" field.</summary>
    public const int PositionalDataFieldNumber = 6;
    private static readonly pb::FieldCodec<float> _repeated_positionalData_codec
        = pb::FieldCodec.ForFloat(50);
    private readonly pbc::RepeatedField<float> positionalData_ = new pbc::RepeatedField<float>();
    /// <summary>
    /// Optional positional data indicating the speaker's position in a virtual world (in meters). This "list" is really
    /// expected to be an array of size 3 containing the X, Y and Z coordinates of the position (in that order).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<float> PositionalData {
      get { return positionalData_; }
    }

    /// <summary>Field number for the "volume_adjustment" field.</summary>
    public const int VolumeAdjustmentFieldNumber = 7;
    private float volumeAdjustment_;
    /// <summary>
    /// A volume adjustment determined by the server for this audio packet. It is up to the client to apply this adjustment to
    /// the resulting audio (or not). Note: A value of 0 means that this field is unset.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float VolumeAdjustment {
      get { return volumeAdjustment_; }
      set {
        volumeAdjustment_ = value;
      }
    }

    /// <summary>Field number for the "is_terminator" field.</summary>
    public const int IsTerminatorFieldNumber = 16;
    private bool isTerminator_;
    /// <summary>
    /// A flag indicating whether this audio packet represents the end of transmission for the current audio stream
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsTerminator {
      get { return isTerminator_; }
      set {
        isTerminator_ = value;
      }
    }

    private object header_;
    /// <summary>Enum of possible cases for the "Header" oneof.</summary>
    public enum HeaderOneofCase {
      None = 0,
      Target = 1,
      Context = 2,
    }
    private HeaderOneofCase headerCase_ = HeaderOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public HeaderOneofCase HeaderCase {
      get { return headerCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearHeader() {
      headerCase_ = HeaderOneofCase.None;
      header_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as Audio);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(Audio other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Target != other.Target) return false;
      if (Context != other.Context) return false;
      if (SenderSession != other.SenderSession) return false;
      if (FrameNumber != other.FrameNumber) return false;
      if (OpusData != other.OpusData) return false;
      if(!positionalData_.Equals(other.positionalData_)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(VolumeAdjustment, other.VolumeAdjustment)) return false;
      if (IsTerminator != other.IsTerminator) return false;
      if (HeaderCase != other.HeaderCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasTarget) hash ^= Target.GetHashCode();
      if (HasContext) hash ^= Context.GetHashCode();
      if (SenderSession != 0) hash ^= SenderSession.GetHashCode();
      if (FrameNumber != 0UL) hash ^= FrameNumber.GetHashCode();
      if (OpusData.Length != 0) hash ^= OpusData.GetHashCode();
      hash ^= positionalData_.GetHashCode();
      if (VolumeAdjustment != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(VolumeAdjustment);
      if (IsTerminator != false) hash ^= IsTerminator.GetHashCode();
      hash ^= (int) headerCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasTarget) {
        output.WriteRawTag(8);
        output.WriteUInt32(Target);
      }
      if (HasContext) {
        output.WriteRawTag(16);
        output.WriteUInt32(Context);
      }
      if (SenderSession != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(SenderSession);
      }
      if (FrameNumber != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(FrameNumber);
      }
      if (OpusData.Length != 0) {
        output.WriteRawTag(42);
        output.WriteBytes(OpusData);
      }
      positionalData_.WriteTo(output, _repeated_positionalData_codec);
      if (VolumeAdjustment != 0F) {
        output.WriteRawTag(61);
        output.WriteFloat(VolumeAdjustment);
      }
      if (IsTerminator != false) {
        output.WriteRawTag(128, 1);
        output.WriteBool(IsTerminator);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasTarget) {
        output.WriteRawTag(8);
        output.WriteUInt32(Target);
      }
      if (HasContext) {
        output.WriteRawTag(16);
        output.WriteUInt32(Context);
      }
      if (SenderSession != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(SenderSession);
      }
      if (FrameNumber != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(FrameNumber);
      }
      if (OpusData.Length != 0) {
        output.WriteRawTag(42);
        output.WriteBytes(OpusData);
      }
      positionalData_.WriteTo(ref output, _repeated_positionalData_codec);
      if (VolumeAdjustment != 0F) {
        output.WriteRawTag(61);
        output.WriteFloat(VolumeAdjustment);
      }
      if (IsTerminator != false) {
        output.WriteRawTag(128, 1);
        output.WriteBool(IsTerminator);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasTarget) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Target);
      }
      if (HasContext) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Context);
      }
      if (SenderSession != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SenderSession);
      }
      if (FrameNumber != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(FrameNumber);
      }
      if (OpusData.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(OpusData);
      }
      size += positionalData_.CalculateSize(_repeated_positionalData_codec);
      if (VolumeAdjustment != 0F) {
        size += 1 + 4;
      }
      if (IsTerminator != false) {
        size += 2 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(Audio other) {
      if (other == null) {
        return;
      }
      if (other.SenderSession != 0) {
        SenderSession = other.SenderSession;
      }
      if (other.FrameNumber != 0UL) {
        FrameNumber = other.FrameNumber;
      }
      if (other.OpusData.Length != 0) {
        OpusData = other.OpusData;
      }
      positionalData_.Add(other.positionalData_);
      if (other.VolumeAdjustment != 0F) {
        VolumeAdjustment = other.VolumeAdjustment;
      }
      if (other.IsTerminator != false) {
        IsTerminator = other.IsTerminator;
      }
      switch (other.HeaderCase) {
        case HeaderOneofCase.Target:
          Target = other.Target;
          break;
        case HeaderOneofCase.Context:
          Context = other.Context;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Target = input.ReadUInt32();
            break;
          }
          case 16: {
            Context = input.ReadUInt32();
            break;
          }
          case 24: {
            SenderSession = input.ReadUInt32();
            break;
          }
          case 32: {
            FrameNumber = input.ReadUInt64();
            break;
          }
          case 42: {
            OpusData = input.ReadBytes();
            break;
          }
          case 50:
          case 53: {
            positionalData_.AddEntriesFrom(input, _repeated_positionalData_codec);
            break;
          }
          case 61: {
            VolumeAdjustment = input.ReadFloat();
            break;
          }
          case 128: {
            IsTerminator = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Target = input.ReadUInt32();
            break;
          }
          case 16: {
            Context = input.ReadUInt32();
            break;
          }
          case 24: {
            SenderSession = input.ReadUInt32();
            break;
          }
          case 32: {
            FrameNumber = input.ReadUInt64();
            break;
          }
          case 42: {
            OpusData = input.ReadBytes();
            break;
          }
          case 50:
          case 53: {
            positionalData_.AddEntriesFrom(ref input, _repeated_positionalData_codec);
            break;
          }
          case 61: {
            VolumeAdjustment = input.ReadFloat();
            break;
          }
          case 128: {
            IsTerminator = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///*
  /// Ping message for checking UDP connectivity (and roundtrip ping) and potentially obtaining further server
  /// details (e.g. version).
  /// </summary>
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class Ping : pb::IMessage<Ping>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Ping> _parser = new pb::MessageParser<Ping>(() => new Ping());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<Ping> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::MumbleUDPProto.MumbleUDPReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Ping() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Ping(Ping other) : this() {
      timestamp_ = other.timestamp_;
      requestExtendedInformation_ = other.requestExtendedInformation_;
      serverVersionV2_ = other.serverVersionV2_;
      userCount_ = other.userCount_;
      maxUserCount_ = other.maxUserCount_;
      maxBandwidthPerUser_ = other.maxBandwidthPerUser_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Ping Clone() {
      return new Ping(this);
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 1;
    private ulong timestamp_;
    /// <summary>
    /// Timestamp as encoded by the client. A server is not supposed to attempt to decode or modify this field. Therefore,
    /// clients may choose an arbitrary format for this timestamp (as long as it fits into a uint64 field).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ulong Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = value;
      }
    }

    /// <summary>Field number for the "request_extended_information" field.</summary>
    public const int RequestExtendedInformationFieldNumber = 2;
    private bool requestExtendedInformation_;
    /// <summary>
    /// A flag set by the sending client, if it wants to obtain additional information about the server.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool RequestExtendedInformation {
      get { return requestExtendedInformation_; }
      set {
        requestExtendedInformation_ = value;
      }
    }

    /// <summary>Field number for the "server_version_v2" field.</summary>
    public const int ServerVersionV2FieldNumber = 3;
    private ulong serverVersionV2_;
    /// <summary>
    /// The version of the server in the new version format.
    /// The new protobuf Ping packet introduced with 1.5 drops support for the legacy version format
    /// since both server and client have to support this new format.
    /// (See https://github.com/mumble-voip/mumble/issues/5827)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ulong ServerVersionV2 {
      get { return serverVersionV2_; }
      set {
        serverVersionV2_ = value;
      }
    }

    /// <summary>Field number for the "user_count" field.</summary>
    public const int UserCountFieldNumber = 4;
    private uint userCount_;
    /// <summary>
    /// The amount of users currently connected to the server
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint UserCount {
      get { return userCount_; }
      set {
        userCount_ = value;
      }
    }

    /// <summary>Field number for the "max_user_count" field.</summary>
    public const int MaxUserCountFieldNumber = 5;
    private uint maxUserCount_;
    /// <summary>
    /// The maximum amount of users permitted on this server
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint MaxUserCount {
      get { return maxUserCount_; }
      set {
        maxUserCount_ = value;
      }
    }

    /// <summary>Field number for the "max_bandwidth_per_user" field.</summary>
    public const int MaxBandwidthPerUserFieldNumber = 6;
    private uint maxBandwidthPerUser_;
    /// <summary>
    /// The maximum bandwidth each user is allowed to use for sending audio to the server
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint MaxBandwidthPerUser {
      get { return maxBandwidthPerUser_; }
      set {
        maxBandwidthPerUser_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as Ping);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(Ping other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Timestamp != other.Timestamp) return false;
      if (RequestExtendedInformation != other.RequestExtendedInformation) return false;
      if (ServerVersionV2 != other.ServerVersionV2) return false;
      if (UserCount != other.UserCount) return false;
      if (MaxUserCount != other.MaxUserCount) return false;
      if (MaxBandwidthPerUser != other.MaxBandwidthPerUser) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (Timestamp != 0UL) hash ^= Timestamp.GetHashCode();
      if (RequestExtendedInformation != false) hash ^= RequestExtendedInformation.GetHashCode();
      if (ServerVersionV2 != 0UL) hash ^= ServerVersionV2.GetHashCode();
      if (UserCount != 0) hash ^= UserCount.GetHashCode();
      if (MaxUserCount != 0) hash ^= MaxUserCount.GetHashCode();
      if (MaxBandwidthPerUser != 0) hash ^= MaxBandwidthPerUser.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Timestamp != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(Timestamp);
      }
      if (RequestExtendedInformation != false) {
        output.WriteRawTag(16);
        output.WriteBool(RequestExtendedInformation);
      }
      if (ServerVersionV2 != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(ServerVersionV2);
      }
      if (UserCount != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(UserCount);
      }
      if (MaxUserCount != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(MaxUserCount);
      }
      if (MaxBandwidthPerUser != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(MaxBandwidthPerUser);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Timestamp != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(Timestamp);
      }
      if (RequestExtendedInformation != false) {
        output.WriteRawTag(16);
        output.WriteBool(RequestExtendedInformation);
      }
      if (ServerVersionV2 != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(ServerVersionV2);
      }
      if (UserCount != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(UserCount);
      }
      if (MaxUserCount != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(MaxUserCount);
      }
      if (MaxBandwidthPerUser != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(MaxBandwidthPerUser);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (Timestamp != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Timestamp);
      }
      if (RequestExtendedInformation != false) {
        size += 1 + 1;
      }
      if (ServerVersionV2 != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ServerVersionV2);
      }
      if (UserCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UserCount);
      }
      if (MaxUserCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MaxUserCount);
      }
      if (MaxBandwidthPerUser != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MaxBandwidthPerUser);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(Ping other) {
      if (other == null) {
        return;
      }
      if (other.Timestamp != 0UL) {
        Timestamp = other.Timestamp;
      }
      if (other.RequestExtendedInformation != false) {
        RequestExtendedInformation = other.RequestExtendedInformation;
      }
      if (other.ServerVersionV2 != 0UL) {
        ServerVersionV2 = other.ServerVersionV2;
      }
      if (other.UserCount != 0) {
        UserCount = other.UserCount;
      }
      if (other.MaxUserCount != 0) {
        MaxUserCount = other.MaxUserCount;
      }
      if (other.MaxBandwidthPerUser != 0) {
        MaxBandwidthPerUser = other.MaxBandwidthPerUser;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Timestamp = input.ReadUInt64();
            break;
          }
          case 16: {
            RequestExtendedInformation = input.ReadBool();
            break;
          }
          case 24: {
            ServerVersionV2 = input.ReadUInt64();
            break;
          }
          case 32: {
            UserCount = input.ReadUInt32();
            break;
          }
          case 40: {
            MaxUserCount = input.ReadUInt32();
            break;
          }
          case 48: {
            MaxBandwidthPerUser = input.ReadUInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Timestamp = input.ReadUInt64();
            break;
          }
          case 16: {
            RequestExtendedInformation = input.ReadBool();
            break;
          }
          case 24: {
            ServerVersionV2 = input.ReadUInt64();
            break;
          }
          case 32: {
            UserCount = input.ReadUInt32();
            break;
          }
          case 40: {
            MaxUserCount = input.ReadUInt32();
            break;
          }
          case 48: {
            MaxBandwidthPerUser = input.ReadUInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
